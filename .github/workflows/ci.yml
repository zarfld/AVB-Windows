name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  actions: read
  contents: read
  issues: write

jobs:
  build:

    runs-on: windows-latest

    env:
      WDK_IncludePath: C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0

    outputs:
      url: ${{ steps.upload_build_logs.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    - name: Restore NuGet packages
      run: nuget restore AVB_Windows.sln

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Install Windows SDK
      run: choco install windows-sdk-10.1 --source=https://chocolatey.org/api/v2/

    - name: Install Windows Driver Kit (WDK)
      run: choco install windowsdriverkit10 --source=https://chocolatey.org/api/v2/

    - name: Set executable permissions for verify_wdk_installation.sh
      run: chmod +x ./scripts/verify_wdk_installation.sh

    - name: Verify Windows Driver Kit (WDK) Installation
      run: |
        ./scripts/verify_wdk_installation.sh
      shell: bash

    - name: Verify Windows SDK Installation
      run: |
        if [ -d "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0" ]; then
          echo "Windows SDK is properly installed."
        else
          echo "Windows SDK is not properly installed."
          exit 1
        fi

    - name: Clean solution
      run: msbuild AVB_Windows.sln /t:Clean

    - name: Build solution
      run: msbuild AVB_Windows.sln /p:Configuration=Release > build.log 2>&1

    - name: Ensure log file exists
      run: |
        if [ ! -f build.log ]; then
          echo "No build output captured." > build.log
        fi

    - name: Run Unit Tests
      run: |
        vstest.console.exe Path\To\Your\TestProject.dll

    - name: Run PVS-Studio Analysis
      run: |
        # Install PVS-Studio
        choco install pvs-studio

        # Run analysis
        "C:\Program Files (x86)\PVS-Studio\PVS-Studio_Cmd.exe" \
          --target "AVB_Windows.sln" \
          --configuration "Release" \
          --output "PVS-Studio.log"

    - name: Check Code Formatting
      run: |
        choco install llvm

        clang-format -i -style=file **/*.cpp **/*.h

        git diff --exit-code

    - name: Download Intel Tools
      run: |
        curl -o Intel_Ethernet_Controller_I210_Datasheet.pdf https://www.intel.com/content/www/us/en/products/sku/58954/intel-ethernet-controller-i210at/specifications.html
        curl -o Intel_Ethernet_Adapter_Complete_Driver_Pack.zip https://downloadcenter.intel.com/product/36773/Intel-Ethernet-Adapters
        curl -o Intel_System_Studio.exe https://www.intel.com/content/www/us/en/developer/tools/system-studio/overview.html
        curl -o Intel_VTune_Profiler.exe https://www.intel.com/content/www/us/en/developer/tools/oneapi/vtune-profiler.html

    - name: Run Intel Tools
      run: |
        # Run Intel System Studio
        start /wait Intel_System_Studio.exe /S

        # Run Intel VTune Profiler
        start /wait Intel_VTune_Profiler.exe /S

    - name: Validate AVB Implementation
      run: |
        # Run validation scripts using Intel tools
        python validate_avb.py

    - name: Update SRS
      run: |
        # Update the SRS document with new requirements
        python update_srs.py

    - name: Update Documentation
      run: |
        # Update the documentation with new requirements and considerations
        python update_docs.py

    - name: Update README
      run: |
        # Update the README with new requirements and key insights
        python update_readme.py

    - name: Run Error Detection
      run: |
        python scripts/error_detection.py

    - name: Save Errors and Metadata
      run: |
        python scripts/error_detection.py > errors_and_metadata.json

    - name: Install PyGithub
      run: pip install PyGithub

    - name: Upload Build Logs
      if: failure()
      id: upload_build_logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build.log
        retention-days: 7
        if-no-files-found: error

    - name: Check for Missing Logs
      run: |
        if [ ! -f build.log ]; then
          echo "No logs found. Skipping error-checking step."

    - name: Run Issue Creation
      if: failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COMMIT_SHA: ${{ github.sha }}
        BUILD_LOGS_LINK: ${{ steps.upload_build_logs.outputs.url }}
      run: |
        python scripts/issue_creation.py

    - name: Use Milestones for Releases
      run: |
        milestone_title="v1.0 release"
        milestone_due_date="2023-12-31"
        milestone_description="Milestone for the v1.0 release"
        milestone=$(gh api -X POST /repos/${{ github.repository }}/milestones -f title="$milestone_title" -f due_on="$milestone_due_date" -f description="$milestone_description")
        echo "Milestone created: $milestone"

    - name: Trigger CI Pipeline for Issue Progress
      run: |
        issue_status="in progress"
        if [ "$issue_status" == "in progress" ]; then
          echo "Triggering CI pipeline for issue progress"
          # Add logic to trigger CI pipeline

    - name: CI Pipeline Alerts for Failed Builds
      run: |
        if [ -f build.log ]; then
          echo "Build failed. Sending alerts."
          # Add logic to send alerts via Slack, email, or GitHub notifications

    - name: Use Separate Labels for Environments
      run: |
        environment="development"
        if [ "$environment" == "development" ]; then
          echo "Labeling as 'in development'"
          # Add logic to label issues as 'in development'
        elif [ "$environment" == "staging" ]; then
          echo "Labeling as 'in staging'"
          # Add logic to label issues as 'in staging'
        elif [ "$environment" == "production" ]; then
          echo "Labeling as 'in production'"
          # Add logic to label issues as 'in production'

    - name: Enforce Branch Protection Rules
      run: |
        branch="main"
        protection_rules=$(gh api -X GET /repos/${{ github.repository }}/branches/$branch/protection)
        if [ -z "$protection_rules" ]; then
          echo "Enforcing branch protection rules"
          # Add logic to enforce branch protection rules

    - name: Continuous Deployment Labels and Issue Auto-Close
      run: |
        deployment_status="success"
        if [ "$deployment_status" == "success" ]; then
          echo "Deployment successful. Auto-closing issues."
          # Add logic to auto-close issues

    - name: Enforce Issue Templates and CI Requirements
      run: |
        issue_template="bug_report.md"
        if [ -f .github/ISSUE_TEMPLATE/$issue_template ]; then
          echo "Enforcing issue templates"
          # Add logic to enforce issue templates

    - name: Integrate Monitoring and Feedback Tools
      run: |
        monitoring_tool="Datadog"
        if [ "$monitoring_tool" == "Datadog" ]; then
          echo "Integrating Datadog for monitoring and feedback"
          # Add logic to integrate Datadog
